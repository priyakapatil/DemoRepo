{
	"name": "DF_JSONDatAFlatten",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_RESTAPIData",
						"type": "DatasetReference"
					},
					"name": "JSONFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_JSONData",
						"type": "DatasetReference"
					},
					"name": "Output"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as (chart as (error as string, result as (indicators as (adjclose as (adjclose as double[])[], quote as (close as double[], high as double[], low as double[], open as double[], volume as integer[])[]), meta as (chartPreviousClose as double, currency as string, currentTradingPeriod as (post as (end as integer, gmtoffset as short, start as integer, timezone as string), pre as (end as integer, gmtoffset as short, start as integer, timezone as string), regular as (end as integer, gmtoffset as short, start as integer, timezone as string)), dataGranularity as double, exchangeName as string, exchangeTimezoneName as string, fiftyTwoWeekHigh as double, fiftyTwoWeekLow as double, firstTradeDate as integer, fullExchangeName as string, gmtoffset as short, hasPrePostMarketData as boolean, instrumentType as string, longName as string, priceHint as short, range as double, regularMarketDayHigh as double, regularMarketDayLow as double, regularMarketPrice as double, regularMarketTime as integer, regularMarketVolume as integer, shortName as string, symbol as string, timezone as string, validRanges as string[]), timestamp as integer[])[])),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> JSONFile",
				"JSONFile foldDown(unroll(body.chart.result.indicators.adjclose.adjclose),",
				"     mapColumn(",
				"          adjclose = body.chart.result.indicators.adjclose.adjclose,",
				"          quote = body.chart.result.indicators.quote,",
				"          meta = body.chart.result.meta,",
				"          timestamp = body.chart.result.timestamp",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> flatten1",
				"flatten1 foldDown(unrollMultiple(quote.close,quote.high,quote.low,quote.open,quote.volume,meta.validRanges,timestamp),",
				"     mapColumn(",
				"          adjclose,",
				"          quote_close = quote.close,",
				"          qoute_high = quote.high,",
				"          qoute_low = quote.low,",
				"          qoute_open = quote.open,",
				"          qoute_volume = quote.volume,",
				"          meta_chartPreviousClose = meta.chartPreviousClose,",
				"          currency = meta.currency,",
				"          currentTradingPeriod_post_endpost = meta.currentTradingPeriod.post.end,",
				"          currentTradingPeriod_post_gmtoffset = meta.currentTradingPeriod.post.gmtoffset,",
				"          currentTradingPeriod_post_start = meta.currentTradingPeriod.post.start,",
				"          currentTradingPeriod_post_timezone = meta.currentTradingPeriod.post.timezone,",
				"          currentTradingPeriod_pre_end = meta.currentTradingPeriod.pre.end,",
				"          currentTradingPeriod_pre_gmtoffset = meta.currentTradingPeriod.pre.gmtoffset,",
				"          currentTradingPeriod_pre_start = meta.currentTradingPeriod.pre.start,",
				"          currentTradingPeriod_pre_timezone = meta.currentTradingPeriod.pre.timezone,",
				"          currentTradingPeriod_regular_end = meta.currentTradingPeriod.regular.end,",
				"          currentTradingPeriod_regular_gmtoffset = meta.currentTradingPeriod.regular.gmtoffset,",
				"          currentTradingPeriod_regular_start = meta.currentTradingPeriod.regular.start,",
				"          currentTradingPeriod_regular_timezone = meta.currentTradingPeriod.regular.timezone,",
				"          dataGranularity = meta.dataGranularity,",
				"          exchangeName = meta.exchangeName,",
				"          exchangeTimezoneName = meta.exchangeTimezoneName,",
				"          fiftyTwoWeekHigh = meta.fiftyTwoWeekHigh,",
				"          fiftyTwoWeekLow = meta.fiftyTwoWeekLow,",
				"          firstTradeDate = meta.firstTradeDate,",
				"          fullExchangeName = meta.fullExchangeName,",
				"          gmtoffset = meta.gmtoffset,",
				"          hasPrePostMarketData = meta.hasPrePostMarketData,",
				"          instrumentType = meta.instrumentType,",
				"          longName = meta.longName,",
				"          priceHint = meta.priceHint,",
				"          range = meta.range,",
				"          regularMarketDayHigh = meta.regularMarketDayHigh,",
				"          regularMarketDayLow = meta.regularMarketDayLow,",
				"          regularMarketPrice = meta.regularMarketPrice,",
				"          regularMarketTime = meta.regularMarketTime,",
				"          regularMarketVolume = meta.regularMarketVolume,",
				"          shortName = meta.shortName,",
				"          timezone = meta.timezone,",
				"          validRanges = meta.validRanges,",
				"          timestamp",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          deptid as string,",
				"          deptname as string",
				"     ),",
				"     partitionFileNames:['StockData.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Output"
			]
		}
	}
}